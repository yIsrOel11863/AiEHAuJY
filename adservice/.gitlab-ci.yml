variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.caching=true"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  SERVICE_NAME: "adservice"

stages:
  - build
  - test
  - sonar
  - package
  - update-helm
  - deploy_pipeline

.gradle_cache: &gradle_cache
  cache:
    key: "${CI_COMMIT_REF_SLUG}-gradle"
    paths:
      - .gradle/wrapper
      - .gradle/caches

build:
  stage: build
  image: gradle:8.5-jdk21
  tags:
    - aws
    - docker
  <<: *gradle_cache
  script:
    - gradle clean build -x test
  artifacts:
    paths:
      - build/
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# test:
#   stage: test
#   image: gradle:8.5-jdk21
#   <<: *gradle_cache
#   script:
#     - gradle test
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#     - if: $CI_COMMIT_BRANCH == "main"

sonar:
  stage: sonar
  image: gradle:8.5-jdk21
  tags:
    - aws
    - docker
  <<: *gradle_cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - gradle sonar
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

package:
  stage: package
  image: docker:28.3.3
  tags:
    - aws
    - docker
  services:
    - docker:28.3.3-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_BUILDKIT: 1
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker buildx build --cache-to type=inline --cache-from type=registry,ref=$CI_REGISTRY_IMAGE/${SERVICE_NAME}:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE/${SERVICE_NAME}:$CI_COMMIT_SHORT_SHA --push .    
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

update-helm-values:
  stage: update-helm
  image: alpine:latest
  tags:
    - aws 
    - docker
  needs:
    - package
  before_script:
    - apk add --no-cache git yq
    - git config --global user.email "ci@gitlab.com"
    - git config --global user.name "GitLab CI"
  script:
    - git clone https://gitlab-ci-token:${HELM_REPO_TOKEN}@${HELM_REPO_URL#https://} helm-repo
    - cd helm-repo/microservices-chart
    - git checkout feature/boutique-helm
    - yq eval ".services.${SERVICE_NAME}.image.repository = \"$CI_REGISTRY_IMAGE/${SERVICE_NAME}\"" -i values.yaml
    - yq eval ".services.${SERVICE_NAME}.image.tag = \"$CI_COMMIT_SHORT_SHA\"" -i values.yaml
    - git add values.yaml
    - git commit -m "Update ${SERVICE_NAME} image to ${CI_COMMIT_SHORT_SHA}"
    - git push origin feature/boutique-helm
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

trigger_deploy_pipeline:
  stage: deploy_pipeline
  needs:
    - update-helm-values
  trigger:
    project: seunayolu/gitops-helm
    branch: feature/boutique-helm
    strategy: depend
  rules:
    - if: $CI_COMMIT_BRANCH == "main"